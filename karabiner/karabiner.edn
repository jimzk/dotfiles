;; ref
;;   - example: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org
;;   - example configuration: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/resources/configurations/edn/example.edn
;;   - tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md
;;   - keycodes: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
;;   - karabiner:
;;     - keycodes: https://github.com/pqrs-org/Karabiner-Elements/blob/master/src/apps/PreferencesWindow/Resources/simple_modifications.json
;;     - modifiers keys: https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/#frommodifiersmandatory
;;     - complex_modifications manipulator definition: https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/
;;   - helpful user configuration examples
;;     - https://github.com/nikitavoloboev/dotfiles/blob/master/karabiner/karabiner.edn

;; code won't read cheatsheet section
;; ! for mandatory
;; # for optional
;; ## for optional any
;; C T O S for left command control optional shift
;; Q W E R for right command control optional shift
;; !! for mandatory command + control + optional + shift (hyper)
;; need to prefix C T O S F with ! or #
;; F for fn
;; P for caps_lock
{
  ;; Casesensitive
  :applications {
    :browser ["^com\\.microsoft\\.edgemac$" "^com\\.google\\.Chrome$" "^com\\.apple\\.Safari$"]
    :terminal ["^com\\.googlecode\\.iterm2$" "^com.jetbrains" "^com\\.microsoft\\.VSCode$" "^com\\.apple\\.Terminal$"]
    :intelliJ ["^com.jetbrains"]

    :IDEA ["^com\\.jetbrains\\.intellij\\.ce$"]
    :GoLand ["^com\\.jetbrains\\.goland$"]

    :Edge ["^com\\.microsoft\\.edgemac$"]
    :iTerm ["^com\\.googlecode\\.iterm2$"]
    :VSCode ["^com\\.microsoft\\.VSCode$"]
    :intelliJ-IDEA ["^com\\.jetbrains\\.intellij$"]
    :intelliJ-GoLand ["^com\\.jetbrains\\.goland$"]

    :WeChat ["^com\\.tencent\\.xinWeChat$"]
    :Discord ["^com\\.hnc\\.Discord$"]
    :Telegram ["^ru\\.keepcoder\\.Telegram$"]

    :Karabiner-Elements ["^org\\.pqrs\\.Karabiner-Elements\\.Preferences$"]
    :Karabiner-EventViewer ["^org\\.pqrs\\.Karabiner-EventViewer$"]
    :Hammerspoon ["^org\\.hammerspoon\\.Hammerspoon$"]

    :Obsidian ["^md\\.obsidian$"]
    :Things3 ["^com\\.culturedcode\\.ThingsMac$"]
    :Raindrop ["^io\\.raindrop\\.macapp$"]
    :Bitwarden ["^com\\.bitwarden\\.desktop$"]
    :PDFExpert ["^com\\.readdle\\.PDFExpert-Mac$"]
    :Youdao ["^com\\.youdao\\.YoudaoDict"]
    :Finder ["^com\\.apple\\.finder$"]
    :SystemReferences ["^com\\.apple\\.systempreferences$"]
    :Music ["^com\\.apple\\.Music$"]
    :Notes ["^com\\.apple\\.Notes$"]
    :ActivityMonitor ["^com\\.apple\\.ActivityMonitor$"]
  }

  :input-sources {
    :pinyin {
        :input_mode_id "com.apple.inputmethod.SCIM.Shuangpin"
        :input_source_id "com.apple.inputmethod.SCIM.Shuangpin"
        :language "zh-Hans"
    }
    :us {
      :input_mode_id ""
      :input_source_id "com.apple.keylayout.US"
      :language "en"
    }
  }

  :templates {
    ;; :launch "osascript -e 'tell application \"Alfred 3\" to run trigger \"launch%sument \"\"'"
    :open "open \"%s\""
    :safeOpen "/usr/local/bin/hs -c \"safeOpen('%s')\""
    :edit "/usr/local/bin/code \"%s\""
    :yabai "/usr/local/bin/yabai -m %s"
    ;; execute for bsp or floating windows
    :yabai-bsp "if [[ $(/usr/local/bin/yabai -m query --windows --window | /usr/local/bin/jq -r '.floating') == 0 && $(/usr/local/bin/yabai -m query --spaces --window | /usr/local/bin/jq -r '.[0].type') == 'bsp' ]]; then /usr/local/bin/yabai -m %s; else /usr/local/bin/yabai -m %s; fi"
    :yabai-focus "cur_window=$(/usr/local/bin/yabai -m query --windows --window | /usr/local/bin/jq '.id' 2>/dev/null) && (%s) && /usr/local/bin/yabai -m window --focus ${cur_window}"
    ;; AppleScipt keystroke and key code table: https://eastmanreference.com/complete-list-of-applescript-key-codes
    ;; have permission issues: 'System Events got an error: osascript is not allowed to send keystrokes.'
    ;; :alfred "osascript -e 'tell application \"Alfred 4\" to search' -e 'tell application \"System Events\" to keystroke \"%s\"'"
    ;; :alfred-execute "osascript -e 'tell application \"Alfred 4\" to search' -e 'tell application \"System Events\"' -e 'keystroke \"%s\"' -e 'key code 36' -e 'end tell'"
    :alfred "/usr/local/bin/hs -c \"alfred('%s')\""
    :alfred-execute "/usr/local/bin/hs -c \"alfred('%s', true)\""
    :alfred-flow "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
    :hs "/usr/local/bin/hs -c \"%s\""
    :script "/usr/local/bin/bash ~/.dotfiles/karabiner/scripts/%s"
  }

  ;;; helper function to generate things little bit quicker
  ;; quick define "layers" or "state" feature(use set_variable)
  ;; can use as conditions in rule list
  ;; {:<layer name> {:from <froms>}}
  :simlayers {
    ;; most frequently used modes
    ; :app-mode {:key :spacebar :condi :!terminal}
    :app-mode {:key :spacebar}
    :mouse-mode {:key :z}
    :window-management-mode {:key :w}
    :terminal-mode {:key :j}

    :config-mode {:key :e}
    :browser-mode {:key :b}
  }
  :simlayer-threshold 250

  ;; Examples
  ;; [:0 [:!!5] nil {:alone :pinyin}] change input method
  :main [
    {:des "keys without prefix"
      :rules [
        ; map caps_lock to control
        [:##caps_lock {:key :left_control} nil {:alone :escape}]
        ; super key
        [:##q {:key :right_command :modi [:right_control :right_option :right_shift]} nil {:alone :q}]
        ; simultaneously =⌫ to delete backward
        ;; [[:equal_sign :delete_or_backspace] :delete_forward]
      ]
    }
    {:des "hyperkey (caps_lock) (QWER)"
      :rules [
        ;; Esc
        [:!QWERopen_bracket :escape]
        ;; space -> enter
        [:!QWERspacebar :return_or_enter]
        [:!QWERCspacebar :!Creturn_or_enter]
        [:!QWERTspacebar :!Treturn_or_enter]
        [:!QWEROspacebar :!Oreturn_or_enter]
        [:!QWERSspacebar :!Sreturn_or_enter]
        ;; delete -> delete_forward
        [:!QWERdelete_or_backspace :delete_forward]
        ;; arrow
        [:!QWERh :left_arrow]
        [:!QWERj :down_arrow]
        [:!QWERl :right_arrow]
        [:!QWERk :up_arrow]
        ;; arrow + command
        [:!QWERCh :!Cleft_arrow]
        [:!QWERCj :!Cdown_arrow]
        [:!QWERCl :!Cright_arrow]
        [:!QWERCk :!Cup_arrow]
        ;; arrow + ctrl
        [:!QWERTh :!Tleft_arrow]
        [:!QWERTj :!Tdown_arrow]
        [:!QWERTl :!Tright_arrow]
        [:!QWERTk :!Tup_arrow]
        ;; arrow + shift
        [:!QWERSh :!Sleft_arrow]
        [:!QWERSj :!Sdown_arrow]
        [:!QWERSl :!Sright_arrow]
        [:!QWERSk :!Sup_arrow]
        ;; arrow + option
        [:!QWEROh :!Oleft_arrow]
        [:!QWEROj :!Odown_arrow]
        [:!QWEROl :!Oright_arrow]
        [:!QWEROk :!Oup_arrow]
        ;; arrow + command + shift
        [:!QWERCSh :!CSleft_arrow]
        [:!QWERCSj :!CSdown_arrow]
        [:!QWERCSl :!CSright_arrow]
        [:!QWERCSk :!CSup_arrow]
        ;; arrow + command + option
        [:!QWERCOh :!COleft_arrow]
        [:!QWERCOj :!COdown_arrow]
        [:!QWERCOl :!COright_arrow]
        [:!QWERCOk :!COup_arrow]
        ;; arrow + ctrl + option
        [:!QWERTOh :!TOleft_arrow]
        [:!QWERTOj :!TOdown_arrow]
        [:!QWERTOl :!TOright_arrow]
        [:!QWERTOk :!TOup_arrow]
        ;; arrow + option + shift
        [:!QWEROSh :!OSleft_arrow]
        [:!QWEROSj :!OSdown_arrow]
        [:!QWEROSl :!OSright_arrow]
        [:!QWEROSk :!OSup_arrow]

        ;; - -> home
        [:!QWERn :!Cleft_arrow :WeChat]
        [:!QWERn :!Cleft_arrow :VSCode]
        [:!QWERn :!Ta :terminal]
        [:!QWERn :home]
        ;; = -> end
        [:!QWERm :!Cright_arrow :WeChat]
        [:!QWERm :!Cright_arrow :VSCode]
        [:!QWERm :!Te :terminal]
        [:!QWERm :end]

        ;; system applicaton management
        [:!QWERu [:hs "rightClickFocusedWindow()"]]  ;; right click menu on focused window
        [:!QWERy [:!Tf2 :down_arrow :right_arrow :right_arrow]]  ;; focus on menu bar
        [:!QWERc :!!f4] ;; Notification Center
        [:!QWERv :!Tf3]  ;; focus on docker
        [:!QWERCv :!CTSf2]  ;; hide/show Dock

        ;; system control
        ;; volume
        [:!QWERe :volume_decrement]
        [:!QWERr :volume_increment]
        [:!QWERw :mute]
        ;; play
        [:!QWERs :vk_consumer_previous]
        [:!QWERd :vk_consumer_next]
        [:!QWERf :play_or_pause]
      ]
    }
    {:des "mouse move"
      :rules [:mouse-mode
        ;; mouse move
        [:k {:mkey {:y -1600 :speed 1.20}}]
        [:j {:mkey {:y 1600 :speed 1.20}}]
        [:h {:mkey {:x -1600 :speed 1.20}}]
        [:l {:mkey {:x 1600 :speed 1.20}}]
        [:!Ck {:mkey {:y -3200 :speed 1.10}}]
        [:!Cj {:mkey {:y 3200 :speed 1.10}}]
        [:!Ch {:mkey {:x -3200 :speed 1.10}}]
        [:!Cl {:mkey {:x 3200 :speed 1.10}}]
        [:!Ok {:mkey {:y -800 :speed 1.20}}]
        [:!Oj {:mkey {:y 800 :speed 1.20}}]
        [:!Oh {:mkey {:x -800 :speed 1.20}}]
        [:!Ol {:mkey {:x 800 :speed 1.20}}]
        ;; scroll
        [:u {:mkey {:vwheel -32 :speed 1.30}}]
        [:d {:mkey {:vwheel 32 :speed 1.30}}]
        [:!Cu {:mkey {:vwheel -64 :speed 1.30}}]
        [:!Cd {:mkey {:vwheel 64 :speed 1.30}}]
        [:!Ou {:mkey {:vwheel -16 :speed 1.30}}]
        [:!Od {:mkey {:vwheel 16 :speed 1.30}}]
        ;; left click
        [:spacebar :button1]
        [:!Cspacebar {:pkey :button1 :modi :left_command}]
        [:!Tspacebar {:pkey :button1 :modi :left_control}]
        [:!Ospacebar {:pkey :button1 :modi :left_option}]
        [:!Sspacebar {:pkey :button1 :modi :left_shift}]
        ;; right click
        [:comma :button2]
      ]
    }
    {:des "window management (w)"
      :rules [:window-management-mode
        ;; :resize-window is defined in :templates
        ;; 1/2 screen
        [:a [:yabai-bsp "window --swap prev" "window --grid 2:2:0:0:1:2"]]
        [:d [:yabai-bsp "window --swap next" "window --grid 2:2:1:0:1:2"]]
        [:q [:yabai-bsp "window --warp prev" "window --grid 2:2:0:1:2:1"]]
        [:e [:yabai-bsp "window --warp next" "window --grid 2:2:0:0:2:1"]]
        ;; 2/3 screen
        [:!Ca [:yabai "window --grid 2:3:0:0:2:2"]]
        [:!Cd [:yabai "window --grid 2:3:1:0:2:2"]]
        [:!Cq [:yabai "window --grid 3:2:0:1:2:2"]]
        [:!Ce [:yabai "window --grid 3:2:0:0:2:2"]]
        ;; 1/3 screen
        [:!Sa [:yabai "window --grid 2:3:0:0:1:2"]]
        [:!Sd [:yabai "window --grid 2:3:2:0:1:2"]]
        [:!Sq [:yabai "window --grid 3:2:0:2:2:1"]]
        [:!Se [:yabai "window --grid 3:2:0:0:2:1"]]
        ;; 1/3 screen middle
        [:!Sr [:yabai "window --grid 3:2:0:1:2:1"]]
        [:!St [:yabai "window --grid 2:3:1:0:1:2"]]

        ;; corner screen
        [:y [:yabai-bsp "space --mirror y-axis" "window --grid 2:2:0:0:1:1"]]
        [:i [:yabai-bsp "space --mirror x-axis" "window --grid 2:2:0:1:1:2"]]
        [:u [:yabai-bsp "space --rotate 90" "window --grid 2:2:1:0:1:1"]]
        [:o [:yabai-bsp "space --rotate 270" "window --grid 2:2:1:1:1:2"]]

        ;; 1/2 screen (layout)
        [:h [:hs "resizeWindow('[0, 0, 50, 100]', '[50, 0, 100, 100]')"]]
        [:l [:hs "resizeWindow('[50, 0, 100, 100]','[0, 0, 50, 100]')"]]
        [:j [:hs "resizeWindow('[0, 50, 100, 100]','[0, 0, 100, 50]')"]]
        [:k [:hs "resizeWindow('[0, 0, 100, 50]','[0, 50, 100, 100]')"]]
        ;; 2/3 screen (layout)
        [:!Ch [:hs "resizeWindow('[0, 0, 66, 100]','[66, 0, 100, 100]')"]]
        [:!Cl [:hs "resizeWindow('[34, 0, 100, 100]','[0, 0, 34, 100]')"]]
        [:!Cj [:hs "resizeWindow('[0, 34, 100, 100]','[0, 0, 100, 34]')"]]
        [:!Ck [:hs "resizeWindow('[0, 0, 100, 66]','[0, 66, 100, 100]')"]]
        ;; 1/3 screen (layout)
        [:!Sh [:hs "resizeWindow('[0, 0, 34, 100]','[34, 0, 100, 100]')"]]
        [:!Sl [:hs "resizeWindow('[66, 0, 100, 100]','[0, 0, 66, 100]')"]]
        [:!Sj [:hs "resizeWindow('[0, 66, 100, 100]','[0, 0, 100, 66]')"]]
        [:!Sk [:hs "resizeWindow('[0, 0, 100, 34]','[0, 34, 100, 100]')"]]

        ;; full screen
        [:g [:yabai "window --grid 2:2:0:0:2:2"]]
        ;; center screen
        [:c [:yabai "window --grid 2:5:1:0:3:2"]]
        [:v [:yabai "window --grid 2:9:1:0:7:2"]]  ;; bigger iniare in center
        ;; maximize Window
        [:f :!Creturn_or_enter :iTerm]
        [:f :!CTf] ;; Maximize Window
        [:m :!Cm] ;; Minimize Window

        ;; resize window
        ;; [:left_arrow [:yabai "window --move rel:-10:0"]]
        ;; [:right_arrow [:yabai "window --move rel:10:0"]]
        ;; [:up_arrow [:yabai "window --move rel:0:-10"]]
        ;; [:down_arrow [:yabai "window --move rel:0:+10"]]
        ;; [:!Cleft_arrow [:yabai "window --resize right:-50:0"]]
        ;; [:!Cright_arrow [:yabai "window --resize right:+50:0"]]
        ;; [:!Cup_arrow [:yabai "window --resize bottom:0:-50"]]
        ;; [:!Cdown_arrow [:yabai "window --resize bottom:0:+50"]]

        ;; Duplicated keys from app-mode
        ;; show active windows (supported by HammerSpoon)
        [:tab :!CTSslash]
        ;; move window to space but no focus
        [:hyphen [:yabai "window --space prev"]]
        [:equal_sign [:yabai "window --space next"]]
        ;; move window to space and focus
        [:open_bracket [:yabai-focus "/usr/local/bin/yabai -m window --space prev"]]
        [:close_bracket [:yabai-focus "/usr/local/bin/yabai -m window --space next"]]
        ;; move window to recent display and focus
        [:backslash [:!CTSf]]  ;; supported by HammerSpoon
        ;; show window and sapce information from yabai
        [:return_or_enter [:hs "showSpaceWindowInfo()"]]  ;; supported by HammerSpoon
      ]
    }
    {:des "invoke app"
      :rules [:app-mode
        ;; previous / next tabs
        [:i :!CSopen_bracket :iTerm]
        [:o :!CSclose_bracket :iTerm]
        [:i :!TStab :Finder]
        [:o :!Ttab :Finder]
        [:i :!CSopen_bracket :VSCode]
        [:o :!CSclose_bracket :VSCode]
        [:i :!CSopen_bracket :intelliJ]
        [:o :!CSclose_bracket :intelliJ]
        [:i :up_arrow :WeChat]
        [:o :down_arrow :WeChat]
        [:i :!Oup_arrow :Discord]
        [:o :!Odown_arrow :Discord]
        [:i :!Oup_arrow :Telegram]
        [:o :!Odown_arrow :Telegram]
        [:i :!TStab]
        [:o :!Ttab]

        ;; hide windows
        [:tab :!Cm :Hammerspoon]  ;; Hammerspoon can't be hinded by cmd-h
        [:tab :!Ch]

        ;; space navigation
        [:a :!CTOf7] ;; Previous Space
        [:d :!CTOf9] ;; Next Space
        [:s :mission_control] ;; Mission Control
        ;; display navigation
        ;; [:caps_lock {:shell "/usr/local/bin/yabai -m display --focus recent || /usr/local/bin/yabai -m display --focus prev || /usr/local/bin/yabai -m display --focus next; sleep 0.5; /usr/local/bin/hs -c \"showDisplayInfo()\""}]
        [:caps_lock :!CTSg]  ;; recent display (supported by HammerSpoon)

        ;; move window to space but no focus
        [:hyphen [:yabai "window --space prev"]]
        [:equal_sign [:yabai "window --space next"]]
        ;; move window to space and focus
        [:open_bracket [:yabai-focus "/usr/local/bin/yabai -m window --space prev"]]
        [:close_bracket [:yabai-focus "/usr/local/bin/yabai -m window --space next"]]
        ;; move window to recent display and focus
        [:backslash [:!CTSf]]  ;; supported by HammerSpoon
        ;; show window and sapce information from yabai
        [:slash [:hs "showSpaceWindowInfo()"]]  ;; supported by HammerSpoon
        ;; space layout
        ;; [:open_bracket {:shell "/usr/local/bin/yabai -m space --layout float; /usr/local/bin/yabai -m window --grid 2:4:1:0:2:2; /usr/local/bin/hs -c \"hs.alert(\\\"to FLOATING Space\\\")\""}]
        ;; [:close_bracket {:shell "/usr/local/bin/yabai -m space --layout bsp; /usr/local/bin/hs -c \"hs.alert(\\\"to BSP Space\\\")\""}]
        ;; ;; window layout (only in bsp space)
        ;; [:backslash {:shell "/usr/local/bin/yabai -m window --toggle float; if [[ $(/usr/local/bin/yabai -m query --windows --window | /usr/local/bin/jq '.floating') == '1' ]]; then msg='FLOATING Window'; else msg='BSP Window'; fi; if [[ \"$msg\" == 'FLOATING Window' ]]; then /usr/local/bin/yabai -m window --grid 2:4:1:0:2:2; fi; /usr/local/bin/hs -c \"hs.alert(\\\"To $msg\\\")\""}]

        [:1 :launchpad]  ;; Expose
        [:3 :!OSv]  ; show clipboard (supported by Alfred)
        [:4 :!CTS4]  ;; Look word up in Eudic dictionary
        [:2 :!!f11] ;; Show Desktop
        [:8 :!!f2] ;; Application Windows
        [:9 :!Ch :Youdao]
        [:9 [:open "/Applications/网易有道词典.app"]]
        [:0 [:!!5]]  ;; add Things3 task

        ;; open application
        [:f :!Ch :browser]
        [:f [:open "/Applications/Google Chrome.app"]]
        [:g :!Ch :VSCode]
        [:g [:open "/Applications/Visual Studio Code.app"]]
        ; [:f [:!TOf12]] ;; iTerm2
        [:l :!Ch :iTerm]
        [:l [:open "/Applications/iTerm.app"]] ;; iTerm2

        [:r :!Ch :Obsidian]
        [:r [:open "/Applications/Obsidian.app"]]
        [:c :!Ch :Finder]
        [:c [:open "/System/Library/CoreServices/Finder.app"]]
        [:e :!Ch :WeChat]
        [:e [:safeOpen "com.tencent.xinWeChat"]]
        [:z :!Ch :Discord]
        [:z [:safeOpen "com.hnc.Discord"]]
        [:v :!Ch :Music]
        [:v [:open "/System/Applications/Music.app/"]]

        [:y :!Ch :Things3]
        [:y [:open "/Applications/Things3.app"]]
        [:t :!Ch :Telegram]
        [:t [:safeOpen "ru.keecoder.Telegram"]]
        [:q :!Ch :PDFExpert]
        [:q [:safeOpen "com.readdle.PDFExpert-Mac"]]

        [:return_or_enter :!CTOSspacebar]  ;; Alfred
        [:q :!Ch :Raindrop]
        [:q [:safeOpen "io.raindrop.macapp"]]
        [:m :!Ch :IDEA]
        [:m [:safeOpen "com.jetbrains.intellij.ce"]]
        [:comma :!Ch :GoLand]
        [:comma [:safeOpen "com.jetbrains.goland"]]

        [:b :!Ch :Bitwarden]
        [:b [:open "/Applications/Bitwarden.app"]]
        [:n :!Ch :Notes]
        [:n [:open "/System/Applications/Notes.app/"]]
      ]
    }
    {:des "configuration (e)"
      :rules [:config-mode
        [:q [:open "/Applications/Karabiner-EventViewer.app"]]
        [:w [:open "/Applications/Karabiner-Elements.app"]]
        [:d [:open "/Applications/Hammerspoon.app"]]
        [:f [:open "/System/Applications/System Preferences.app"]]
        [:a [:open "/System/Applications/Utilities/Activity Monitor.app/"]]

        ;; reload hammerspoon, goku
        [:r [:script "reload_config.sh"]]

        ;; open documentation in browser
        ;; goku
        [:1 {:shell "open https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org https://github.com/yqrashawn/GokuRakuJoudo/blob/master/resources/configurations/edn/example.edn https://github.com/nikitavoloboev/dotfiles/blob/master/karabiner/karabiner.edn"}]
        ;; yabai
        [:2 {:shell "open https://github.com/koekeishiya/yabai/wiki/Commands https://github.com/koekeishiya/yabai/blob/master/doc/yabai.asciidoc"}]
        ;; Hammerspoon
        [:3 {:shell "open https://www.hammerspoon.org/docs/index.html"}]
        ;; AppleScript
        [:4 {:shell "open https://eastmanreference.com/complete-list-of-applescript-key-codes https://sspai.com/post/46912 https://sspai.com/post/43758"}]

        ;; development documentation
        [:0 {:shell "open https://www.baeldung.com/ https://www.geeksforgeeks.org https://stackoverflow.com/ https://programming-idioms.org/cheatsheet/Java"}]
        [:slash {:shell "open https://learnxinyminutes.com https://devhints.io https://quickref.me"}]
      ]
    }
    {:des "browser (b)"
      :rules [:browser-mode
        ;; [:i [:alfred-execute "cdcd"]]
        [:w [:open "https://webo.com"]]
        [:t [:open "https://twitter.com"]]
        [:g [:open "https://github.com/notifications"]]
        [:l [:open "https://www.bilibili.com/watchlater/#/list"]]
        [:m [:open "https://mail.google.com/mail"]]
        [:k :!COb :browser] ;; open bookmarks
      ]
    }
    {:des "terminal (j)"
      :rules [[:condi :terminal-mode :terminal]
        ;; terminal
        [:escape [:!Tu :e :x :i :t :return_or_enter]] ; exit terminal
        [:r [:!Ta :t :l :d :r :spacebar :return_or_enter]] ; tldr
        [:u [:!Tu :c :l :e :a :r :return_or_enter]] ; clear screen
        ;; vim
        [:q [:escape :escape :!Ssemicolon :!Tu :q :!S1 :return_or_enter]] ; exit in vim
        [:w [:escape :escape :!Ssemicolon :!Tu :w :q :!S1 :return_or_enter]] ; save and exit in vim
        [:v [:spacebar :!Sbackslash :spacebar :v :i :m :spacebar :hyphen :return_or_enter]] ; temporary cat in vim
        ;; reload zsh
        [:z [:!Tu :e :x :e :c :spacebar :z :s :h :return_or_enter]]

        ;; zle widget
        [:c [:!Tg :c]] ; command cheatsheet
        [:g [:!Tg :g]] ; shortcut cheatsheet
        ;; [:v [:!Tg :v]] ; old cheat
        [:b [:!Tg :b]] ; git branch
        [:d [:!Tg :d]] ; git file
        [:l [:!Tg :l]] ; git commit
        [:h [:!Tg :h]] ; git file commit
        [:t [:!Tg :t]] ; git tag
        [:s [:!Tg :s]] ; git status
        [:e [:!Tg :e]] ; env
        [:a [:!Tg :a]] ; alias
        [:f [:!Tg :f]] ; env
        ;; reuse commands
        [:p [:!S1 :!S4 :return_or_enter]] ;; !$ last argument in last argument
        ;; [:6 [:!S1 :!S6 :return_or_enter]] ;; !^ first argument in last argument
        ;; [:8 [:!S1 :!S8 :return_or_enter]] ;; !* all arguments in last argument
        ;; [:9 [:!Tu :!S1 :!Ssemicolon :hyphen :return_or_enter]] ;; !-: last command excpt for last argument
        ;; [:0 [:!Tu :r :return_or_enter]] ;; execute last command
      ]
    }
  ]
}
